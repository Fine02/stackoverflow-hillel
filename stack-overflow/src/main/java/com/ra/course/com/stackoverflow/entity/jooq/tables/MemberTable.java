/*
 * This file is generated by jOOQ.
 */
package com.ra.course.com.stackoverflow.entity.jooq.tables;


import com.ra.course.com.stackoverflow.entity.jooq.Indexes;
import com.ra.course.com.stackoverflow.entity.jooq.Keys;
import com.ra.course.com.stackoverflow.entity.jooq.Public;
import com.ra.course.com.stackoverflow.entity.jooq.tables.records.MemberRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MemberTable extends TableImpl<MemberRecord> {

    private static final long serialVersionUID = 425188814;

    /**
     * The reference instance of <code>public.member</code>
     */
    public static final MemberTable MEMBER_TABLE = new MemberTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MemberRecord> getRecordType() {
        return MemberRecord.class;
    }

    /**
     * The column <code>public.member.id</code>.
     */
    public static final TableField<MemberRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('member_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), MEMBER_TABLE, "");

    /**
     * The column <code>public.member.account_id</code>.
     */
    public static final TableField<MemberRecord, Long> ACCOUNT_ID = createField(DSL.name("account_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), MEMBER_TABLE, "");

    /**
     * No further instances allowed
     */
    private MemberTable() {
        this(DSL.name("member"), null);
    }

    private MemberTable(Name alias, Table<MemberRecord> aliased) {
        this(alias, aliased, null);
    }

    private MemberTable(Name alias, Table<MemberRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> MemberTable(Table<O> child, ForeignKey<O, MemberRecord> key) {
        super(child, key, MEMBER_TABLE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MEMBER_PKEY);
    }

    @Override
    public Identity<MemberRecord, Long> getIdentity() {
        return Keys.IDENTITY_MEMBER;
    }

    @Override
    public UniqueKey<MemberRecord> getPrimaryKey() {
        return Keys.MEMBER_PKEY;
    }

    @Override
    public List<UniqueKey<MemberRecord>> getKeys() {
        return Arrays.<UniqueKey<MemberRecord>>asList(Keys.MEMBER_PKEY);
    }

    @Override
    public List<ForeignKey<MemberRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MemberRecord, ?>>asList(Keys.MEMBER__FK_ACCOUNT_ID);
    }

    public AccountTable account() {
        return new AccountTable(this, Keys.MEMBER__FK_ACCOUNT_ID);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
