/*
 * This file is generated by jOOQ.
 */
package com.ra.course.com.stackoverflow.entity.jooq.tables;


import com.ra.course.com.stackoverflow.entity.jooq.Keys;
import com.ra.course.com.stackoverflow.entity.jooq.Public;
import com.ra.course.com.stackoverflow.entity.jooq.tables.records.AccountStatusRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountStatusTable extends TableImpl<AccountStatusRecord> {

    private static final long serialVersionUID = -1851462167;

    /**
     * The reference instance of <code>public.account_status</code>
     */
    public static final AccountStatusTable ACCOUNT_STATUS_TABLE = new AccountStatusTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountStatusRecord> getRecordType() {
        return AccountStatusRecord.class;
    }

    /**
     * The column <code>public.account_status.id</code>.
     */
    public final TableField<AccountStatusRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('account_status_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.account_status.status</code>.
     */
    public final TableField<AccountStatusRecord, String> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * Create a <code>public.account_status</code> table reference
     */
    public AccountStatusTable() {
        this(DSL.name("account_status"), null);
    }

    /**
     * Create an aliased <code>public.account_status</code> table reference
     */
    public AccountStatusTable(String alias) {
        this(DSL.name(alias), ACCOUNT_STATUS_TABLE);
    }

    /**
     * Create an aliased <code>public.account_status</code> table reference
     */
    public AccountStatusTable(Name alias) {
        this(alias, ACCOUNT_STATUS_TABLE);
    }

    private AccountStatusTable(Name alias, Table<AccountStatusRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountStatusTable(Name alias, Table<AccountStatusRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> AccountStatusTable(Table<O> child, ForeignKey<O, AccountStatusRecord> key) {
        super(child, key, ACCOUNT_STATUS_TABLE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<AccountStatusRecord, Long> getIdentity() {
        return Keys.IDENTITY_ACCOUNT_STATUS;
    }

    @Override
    public UniqueKey<AccountStatusRecord> getPrimaryKey() {
        return Keys.ACCOUNT_STATUS_PKEY;
    }

    @Override
    public List<UniqueKey<AccountStatusRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountStatusRecord>>asList(Keys.ACCOUNT_STATUS_PKEY);
    }

    @Override
    public AccountStatusTable as(String alias) {
        return new AccountStatusTable(DSL.name(alias), this);
    }

    @Override
    public AccountStatusTable as(Name alias) {
        return new AccountStatusTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountStatusTable rename(String name) {
        return new AccountStatusTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountStatusTable rename(Name name) {
        return new AccountStatusTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
