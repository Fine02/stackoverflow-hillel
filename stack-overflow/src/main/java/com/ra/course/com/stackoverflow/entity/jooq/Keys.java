/*
 * This file is generated by jOOQ.
 */
package com.ra.course.com.stackoverflow.entity.jooq;


import com.ra.course.com.stackoverflow.entity.jooq.tables.*;
import com.ra.course.com.stackoverflow.entity.jooq.tables.records.*;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;

import javax.annotation.processing.Generated;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>public</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<AccountRecord, Long> IDENTITY_ACCOUNT = Identities0.IDENTITY_ACCOUNT;
    public static final Identity<AnswerRecord, Long> IDENTITY_ANSWER = Identities0.IDENTITY_ANSWER;
    public static final Identity<BountyRecord, Long> IDENTITY_BOUNTY = Identities0.IDENTITY_BOUNTY;
    public static final Identity<CommentRecord, Long> IDENTITY_COMMENT = Identities0.IDENTITY_COMMENT;
    public static final Identity<MemberRecord, Long> IDENTITY_MEMBER = Identities0.IDENTITY_MEMBER;
    public static final Identity<NotificationRecord, Long> IDENTITY_NOTIFICATION = Identities0.IDENTITY_NOTIFICATION;
    public static final Identity<PhotoRecord, Long> IDENTITY_PHOTO = Identities0.IDENTITY_PHOTO;
    public static final Identity<QuestionRecord, Long> IDENTITY_QUESTION = Identities0.IDENTITY_QUESTION;
    public static final Identity<TagRecord, Long> IDENTITY_TAG = Identities0.IDENTITY_TAG;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccountRecord> ACCOUNT_PKEY = UniqueKeys0.ACCOUNT_PKEY;
    public static final UniqueKey<AnswerRecord> ANSWER_PKEY = UniqueKeys0.ANSWER_PKEY;
    public static final UniqueKey<BountyRecord> BOUNTY_PKEY = UniqueKeys0.BOUNTY_PKEY;
    public static final UniqueKey<CommentRecord> COMMENT_PKEY = UniqueKeys0.COMMENT_PKEY;
    public static final UniqueKey<MemberRecord> MEMBER_PKEY = UniqueKeys0.MEMBER_PKEY;
    public static final UniqueKey<NotificationRecord> NOTIFICATION_PKEY = UniqueKeys0.NOTIFICATION_PKEY;
    public static final UniqueKey<PhotoRecord> PHOTO_PKEY = UniqueKeys0.PHOTO_PKEY;
    public static final UniqueKey<QuestionRecord> QUESTION_PKEY = UniqueKeys0.QUESTION_PKEY;
    public static final UniqueKey<TagRecord> TAG_PKEY = UniqueKeys0.TAG_PKEY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AnswerRecord, MemberRecord> ANSWER__FK_ANSWER_AUTHOR_ID = ForeignKeys0.ANSWER__FK_ANSWER_AUTHOR_ID;
    public static final ForeignKey<AnswerRecord, QuestionRecord> ANSWER__FK_ANSWER_QUESTION_ID = ForeignKeys0.ANSWER__FK_ANSWER_QUESTION_ID;
    public static final ForeignKey<BountyRecord, MemberRecord> BOUNTY__FK_CREATOR_ID = ForeignKeys0.BOUNTY__FK_CREATOR_ID;
    public static final ForeignKey<CommentRecord, MemberRecord> COMMENT__FK_COMMENT_AUTHOR_ID = ForeignKeys0.COMMENT__FK_COMMENT_AUTHOR_ID;
    public static final ForeignKey<CommentRecord, AnswerRecord> COMMENT__FK_COMMENT_ANSWER_ID = ForeignKeys0.COMMENT__FK_COMMENT_ANSWER_ID;
    public static final ForeignKey<CommentRecord, QuestionRecord> COMMENT__FK_COMMENT_QUESTION_ID = ForeignKeys0.COMMENT__FK_COMMENT_QUESTION_ID;
    public static final ForeignKey<MemberRecord, AccountRecord> MEMBER__FK_ACCOUNT_ID = ForeignKeys0.MEMBER__FK_ACCOUNT_ID;
    public static final ForeignKey<PhotoRecord, QuestionRecord> PHOTO__FK_PHOTO_QUESTION_ID = ForeignKeys0.PHOTO__FK_PHOTO_QUESTION_ID;
    public static final ForeignKey<PhotoRecord, AnswerRecord> PHOTO__FK_PHOTO_ANSWER_ID = ForeignKeys0.PHOTO__FK_PHOTO_ANSWER_ID;
    public static final ForeignKey<PhotoRecord, CommentRecord> PHOTO__FK_PHOTO_COMMENT_ID = ForeignKeys0.PHOTO__FK_PHOTO_COMMENT_ID;
    public static final ForeignKey<QuestionRecord, MemberRecord> QUESTION__FK_AUTHOR_ID = ForeignKeys0.QUESTION__FK_AUTHOR_ID;
    public static final ForeignKey<QuestionRecord, BountyRecord> QUESTION__FK_BOUNTY_ID = ForeignKeys0.QUESTION__FK_BOUNTY_ID;
    public static final ForeignKey<TagQuestionRecord, TagRecord> TAG_QUESTION__FK_TAG_QUESTION_TAG_ID = ForeignKeys0.TAG_QUESTION__FK_TAG_QUESTION_TAG_ID;
    public static final ForeignKey<TagQuestionRecord, QuestionRecord> TAG_QUESTION__FK_TAG_QUESTION_QUESTION_ID = ForeignKeys0.TAG_QUESTION__FK_TAG_QUESTION_QUESTION_ID;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<AccountRecord, Long> IDENTITY_ACCOUNT = Internal.createIdentity(AccountTable.ACCOUNT_TABLE, AccountTable.ID);
        public static Identity<AnswerRecord, Long> IDENTITY_ANSWER = Internal.createIdentity(AnswerTable.ANSWER_TABLE, AnswerTable.ID);
        public static Identity<BountyRecord, Long> IDENTITY_BOUNTY = Internal.createIdentity(BountyTable.BOUNTY_TABLE, BountyTable.ID);
        public static Identity<CommentRecord, Long> IDENTITY_COMMENT = Internal.createIdentity(CommentTable.COMMENT_TABLE, CommentTable.ID);
        public static Identity<MemberRecord, Long> IDENTITY_MEMBER = Internal.createIdentity(MemberTable.MEMBER_TABLE, MemberTable.ID);
        public static Identity<NotificationRecord, Long> IDENTITY_NOTIFICATION = Internal.createIdentity(NotificationTable.NOTIFICATION_TABLE, NotificationTable.ID);
        public static Identity<PhotoRecord, Long> IDENTITY_PHOTO = Internal.createIdentity(PhotoTable.PHOTO_TABLE, PhotoTable.ID);
        public static Identity<QuestionRecord, Long> IDENTITY_QUESTION = Internal.createIdentity(QuestionTable.QUESTION_TABLE, QuestionTable.ID);
        public static Identity<TagRecord, Long> IDENTITY_TAG = Internal.createIdentity(TagTable.TAG_TABLE, TagTable.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<AccountRecord> ACCOUNT_PKEY = Internal.createUniqueKey(AccountTable.ACCOUNT_TABLE, "account_pkey", AccountTable.ID);
        public static final UniqueKey<AnswerRecord> ANSWER_PKEY = Internal.createUniqueKey(AnswerTable.ANSWER_TABLE, "answer_pkey", AnswerTable.ID);
        public static final UniqueKey<BountyRecord> BOUNTY_PKEY = Internal.createUniqueKey(BountyTable.BOUNTY_TABLE, "bounty_pkey", BountyTable.ID);
        public static final UniqueKey<CommentRecord> COMMENT_PKEY = Internal.createUniqueKey(CommentTable.COMMENT_TABLE, "comment_pkey", CommentTable.ID);
        public static final UniqueKey<MemberRecord> MEMBER_PKEY = Internal.createUniqueKey(MemberTable.MEMBER_TABLE, "member_pkey", MemberTable.ID);
        public static final UniqueKey<NotificationRecord> NOTIFICATION_PKEY = Internal.createUniqueKey(NotificationTable.NOTIFICATION_TABLE, "notification_pkey", NotificationTable.ID);
        public static final UniqueKey<PhotoRecord> PHOTO_PKEY = Internal.createUniqueKey(PhotoTable.PHOTO_TABLE, "photo_pkey", PhotoTable.ID);
        public static final UniqueKey<QuestionRecord> QUESTION_PKEY = Internal.createUniqueKey(QuestionTable.QUESTION_TABLE, "question_pkey", QuestionTable.ID);
        public static final UniqueKey<TagRecord> TAG_PKEY = Internal.createUniqueKey(TagTable.TAG_TABLE, "tag_pkey", TagTable.ID);
    }

    private static class ForeignKeys0 {
        public static final ForeignKey<AnswerRecord, MemberRecord> ANSWER__FK_ANSWER_AUTHOR_ID = Internal.createForeignKey(com.ra.course.com.stackoverflow.entity.jooq.Keys.MEMBER_PKEY, AnswerTable.ANSWER_TABLE, "answer__fk_answer_author_id", AnswerTable.AUTHOR_ID);
        public static final ForeignKey<AnswerRecord, QuestionRecord> ANSWER__FK_ANSWER_QUESTION_ID = Internal.createForeignKey(com.ra.course.com.stackoverflow.entity.jooq.Keys.QUESTION_PKEY, AnswerTable.ANSWER_TABLE, "answer__fk_answer_question_id", AnswerTable.QUESTION_ID);
        public static final ForeignKey<BountyRecord, MemberRecord> BOUNTY__FK_CREATOR_ID = Internal.createForeignKey(com.ra.course.com.stackoverflow.entity.jooq.Keys.MEMBER_PKEY, BountyTable.BOUNTY_TABLE, "bounty__fk_creator_id", BountyTable.ID);
        public static final ForeignKey<CommentRecord, MemberRecord> COMMENT__FK_COMMENT_AUTHOR_ID = Internal.createForeignKey(com.ra.course.com.stackoverflow.entity.jooq.Keys.MEMBER_PKEY, CommentTable.COMMENT_TABLE, "comment__fk_comment_author_id", CommentTable.AUTHOR_ID);
        public static final ForeignKey<CommentRecord, AnswerRecord> COMMENT__FK_COMMENT_ANSWER_ID = Internal.createForeignKey(com.ra.course.com.stackoverflow.entity.jooq.Keys.ANSWER_PKEY, CommentTable.COMMENT_TABLE, "comment__fk_comment_answer_id", CommentTable.ANSWER_ID);
        public static final ForeignKey<CommentRecord, QuestionRecord> COMMENT__FK_COMMENT_QUESTION_ID = Internal.createForeignKey(com.ra.course.com.stackoverflow.entity.jooq.Keys.QUESTION_PKEY, CommentTable.COMMENT_TABLE, "comment__fk_comment_question_id", CommentTable.QUESTION_ID);
        public static final ForeignKey<MemberRecord, AccountRecord> MEMBER__FK_ACCOUNT_ID = Internal.createForeignKey(com.ra.course.com.stackoverflow.entity.jooq.Keys.ACCOUNT_PKEY, MemberTable.MEMBER_TABLE, "member__fk_account_id", MemberTable.ID);
        public static final ForeignKey<PhotoRecord, QuestionRecord> PHOTO__FK_PHOTO_QUESTION_ID = Internal.createForeignKey(com.ra.course.com.stackoverflow.entity.jooq.Keys.QUESTION_PKEY, PhotoTable.PHOTO_TABLE, "photo__fk_photo_question_id", PhotoTable.QUESTION_ID);
        public static final ForeignKey<PhotoRecord, AnswerRecord> PHOTO__FK_PHOTO_ANSWER_ID = Internal.createForeignKey(com.ra.course.com.stackoverflow.entity.jooq.Keys.ANSWER_PKEY, PhotoTable.PHOTO_TABLE, "photo__fk_photo_answer_id", PhotoTable.ANSWER_ID);
        public static final ForeignKey<PhotoRecord, CommentRecord> PHOTO__FK_PHOTO_COMMENT_ID = Internal.createForeignKey(com.ra.course.com.stackoverflow.entity.jooq.Keys.COMMENT_PKEY, PhotoTable.PHOTO_TABLE, "photo__fk_photo_comment_id", PhotoTable.COMMENT_ID);
        public static final ForeignKey<QuestionRecord, MemberRecord> QUESTION__FK_AUTHOR_ID = Internal.createForeignKey(com.ra.course.com.stackoverflow.entity.jooq.Keys.MEMBER_PKEY, QuestionTable.QUESTION_TABLE, "question__fk_author_id", QuestionTable.AUTHOR_ID);
        public static final ForeignKey<QuestionRecord, BountyRecord> QUESTION__FK_BOUNTY_ID = Internal.createForeignKey(com.ra.course.com.stackoverflow.entity.jooq.Keys.BOUNTY_PKEY, QuestionTable.QUESTION_TABLE, "question__fk_bounty_id", QuestionTable.BOUNTY_ID);
        public static final ForeignKey<TagQuestionRecord, TagRecord> TAG_QUESTION__FK_TAG_QUESTION_TAG_ID = Internal.createForeignKey(com.ra.course.com.stackoverflow.entity.jooq.Keys.TAG_PKEY, TagQuestionTable.TAG_QUESTION_TABLE, "tag_question__fk_tag_question_tag_id", TagQuestionTable.TAG_ID);
        public static final ForeignKey<TagQuestionRecord, QuestionRecord> TAG_QUESTION__FK_TAG_QUESTION_QUESTION_ID = Internal.createForeignKey(com.ra.course.com.stackoverflow.entity.jooq.Keys.QUESTION_PKEY, TagQuestionTable.TAG_QUESTION_TABLE, "tag_question__fk_tag_question_question_id", TagQuestionTable.QUESTION_ID);
    }
}
