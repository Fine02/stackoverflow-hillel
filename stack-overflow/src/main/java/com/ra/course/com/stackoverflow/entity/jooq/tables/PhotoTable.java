/*
 * This file is generated by jOOQ.
 */
package com.ra.course.com.stackoverflow.entity.jooq.tables;


import com.ra.course.com.stackoverflow.entity.jooq.Keys;
import com.ra.course.com.stackoverflow.entity.jooq.Public;
import com.ra.course.com.stackoverflow.entity.jooq.tables.records.PhotoRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PhotoTable extends TableImpl<PhotoRecord> {

    private static final long serialVersionUID = -435079792;

    /**
     * The reference instance of <code>public.photo</code>
     */
    public static final PhotoTable PHOTO_TABLE = new PhotoTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PhotoRecord> getRecordType() {
        return PhotoRecord.class;
    }

    /**
     * The column <code>public.photo.id</code>.
     */
    public final TableField<PhotoRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('photo_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.photo.photo_path</code>.
     */
    public final TableField<PhotoRecord, String> PHOTO_PATH = createField(DSL.name("photo_path"), org.jooq.impl.SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>public.photo.creation_date</code>.
     */
    public final TableField<PhotoRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.photo.question_id</code>.
     */
    public final TableField<PhotoRecord, Long> QUESTION_ID = createField(DSL.name("question_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.photo.answer_id</code>.
     */
    public final TableField<PhotoRecord, Long> ANSWER_ID = createField(DSL.name("answer_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.photo.comment_id</code>.
     */
    public final TableField<PhotoRecord, Long> COMMENT_ID = createField(DSL.name("comment_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.photo</code> table reference
     */
    public PhotoTable() {
        this(DSL.name("photo"), null);
    }

    /**
     * Create an aliased <code>public.photo</code> table reference
     */
    public PhotoTable(String alias) {
        this(DSL.name(alias), PHOTO_TABLE);
    }

    /**
     * Create an aliased <code>public.photo</code> table reference
     */
    public PhotoTable(Name alias) {
        this(alias, PHOTO_TABLE);
    }

    private PhotoTable(Name alias, Table<PhotoRecord> aliased) {
        this(alias, aliased, null);
    }

    private PhotoTable(Name alias, Table<PhotoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> PhotoTable(Table<O> child, ForeignKey<O, PhotoRecord> key) {
        super(child, key, PHOTO_TABLE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<PhotoRecord, Long> getIdentity() {
        return Keys.IDENTITY_PHOTO;
    }

    @Override
    public UniqueKey<PhotoRecord> getPrimaryKey() {
        return Keys.PHOTO_PKEY;
    }

    @Override
    public List<UniqueKey<PhotoRecord>> getKeys() {
        return Arrays.<UniqueKey<PhotoRecord>>asList(Keys.PHOTO_PKEY);
    }

    @Override
    public List<ForeignKey<PhotoRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PhotoRecord, ?>>asList(Keys.PHOTO__FK_PHOTO_QUESTION_ID, Keys.PHOTO__FK_PHOTO_ANSWER_ID, Keys.PHOTO__FK_PHOTO_COMMENT_ID);
    }

    public QuestionTable question() {
        return new QuestionTable(this, Keys.PHOTO__FK_PHOTO_QUESTION_ID);
    }

    public AnswerTable answer() {
        return new AnswerTable(this, Keys.PHOTO__FK_PHOTO_ANSWER_ID);
    }

    public CommentTable comment() {
        return new CommentTable(this, Keys.PHOTO__FK_PHOTO_COMMENT_ID);
    }

    @Override
    public PhotoTable as(String alias) {
        return new PhotoTable(DSL.name(alias), this);
    }

    @Override
    public PhotoTable as(Name alias) {
        return new PhotoTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PhotoTable rename(String name) {
        return new PhotoTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PhotoTable rename(Name name) {
        return new PhotoTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, LocalDateTime, Long, Long, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
