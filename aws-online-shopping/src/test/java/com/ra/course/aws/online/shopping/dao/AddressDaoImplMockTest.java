package com.ra.course.aws.online.shopping.dao;

import com.ra.course.aws.online.shopping.dao.impl.AddressDaoImpl;
import com.ra.course.aws.online.shopping.entity.Address;
import com.ra.course.aws.online.shopping.keyholder.KeyHolderFactory;
import com.ra.course.aws.online.shopping.mapper.AddressRowMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.eq;
import static org.mockito.Mockito.verify;


public class AddressDaoImplMockTest {

    private AddressDao addressDao;
    private final JdbcTemplate jdbcTemplate = mock(JdbcTemplate.class);
    private KeyHolderFactory keyHolderFactory = mock(KeyHolderFactory.class);
    private Address address;

    @BeforeEach
    void setUp() {
        addressDao = new AddressDaoImpl(jdbcTemplate, keyHolderFactory);
        address = new Address("Garmatna", "Kyiv", "Kyiv", "01135", "Ukraine");
    }

    @Test
    @DisplayName("Should insert address into DB an return autogenerated ID")
    public void saveTest() {
        //given
        Long expectedId = 7L;

        KeyHolder keyHolder = mock(GeneratedKeyHolder.class);
        when(keyHolderFactory.newKeyHolder()).thenReturn(keyHolder);

        when(keyHolder.getKey()).thenReturn(expectedId);
        when(jdbcTemplate.update(Mockito.any(PreparedStatementCreator.class), Mockito.any(KeyHolder.class))).thenReturn(1);
        //when
        Long savedAddressId = addressDao.save(address);
        //then
        assertEquals(expectedId, savedAddressId);
    }

    @Test
    public void updateTest() {
        //given
        address.setCountry("Russia");
        //when
        addressDao.update(address);
        //then
        verify(jdbcTemplate).update(any(), eq(address.getStreetAddress()), eq(address.getCity()), eq(address.getState()),
                eq(address.getZipCode()), eq(address.getCountry()), eq(address.getId()));
    }

    @Test
    public void removeTest() {
        //when
        assertTrue(addressDao.remove(1L));
        //then
        verify(jdbcTemplate).update(any(), eq(1L));
    }

    @Test
    public void findByIDTest() {
        //given
        when(jdbcTemplate.queryForObject(any(), eq(new Object[]{1L}), any(AddressRowMapper.class))).thenReturn(address);
        //when
        Address result = addressDao.findById(1L);
        //then
        assertEquals(result, address);
    }
}