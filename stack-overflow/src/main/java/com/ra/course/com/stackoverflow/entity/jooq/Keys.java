/*
 * This file is generated by jOOQ.
 */
package com.ra.course.com.stackoverflow.entity.jooq;


import com.ra.course.com.stackoverflow.entity.jooq.tables.*;
import com.ra.course.com.stackoverflow.entity.jooq.tables.records.*;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>public</code> schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<AccountRecord, Long> IDENTITY_ACCOUNT = Identities0.IDENTITY_ACCOUNT;
    public static final Identity<AccountStatusRecord, Long> IDENTITY_ACCOUNT_STATUS = Identities0.IDENTITY_ACCOUNT_STATUS;
    public static final Identity<AnswerRecord, Long> IDENTITY_ANSWER = Identities0.IDENTITY_ANSWER;
    public static final Identity<BountyRecord, Long> IDENTITY_BOUNTY = Identities0.IDENTITY_BOUNTY;
    public static final Identity<CommentRecord, Long> IDENTITY_COMMENT = Identities0.IDENTITY_COMMENT;
    public static final Identity<MemberRecord, Long> IDENTITY_MEMBER = Identities0.IDENTITY_MEMBER;
    public static final Identity<PhotoRecord, Long> IDENTITY_PHOTO = Identities0.IDENTITY_PHOTO;
    public static final Identity<QuestionRecord, Long> IDENTITY_QUESTION = Identities0.IDENTITY_QUESTION;
    public static final Identity<QuestionClosingRemarkRecord, Long> IDENTITY_QUESTION_CLOSING_REMARK = Identities0.IDENTITY_QUESTION_CLOSING_REMARK;
    public static final Identity<QuestionStatusRecord, Long> IDENTITY_QUESTION_STATUS = Identities0.IDENTITY_QUESTION_STATUS;
    public static final Identity<TagRecord, Long> IDENTITY_TAG = Identities0.IDENTITY_TAG;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccountRecord> ACCOUNT_PKEY = UniqueKeys0.ACCOUNT_PKEY;
    public static final UniqueKey<AccountStatusRecord> ACCOUNT_STATUS_PKEY = UniqueKeys0.ACCOUNT_STATUS_PKEY;
    public static final UniqueKey<AnswerRecord> ANSWER_PKEY = UniqueKeys0.ANSWER_PKEY;
    public static final UniqueKey<BountyRecord> BOUNTY_PKEY = UniqueKeys0.BOUNTY_PKEY;
    public static final UniqueKey<CommentRecord> COMMENT_PKEY = UniqueKeys0.COMMENT_PKEY;
    public static final UniqueKey<MemberRecord> MEMBER_PKEY = UniqueKeys0.MEMBER_PKEY;
    public static final UniqueKey<PhotoRecord> PHOTO_PKEY = UniqueKeys0.PHOTO_PKEY;
    public static final UniqueKey<QuestionRecord> QUESTION_PKEY = UniqueKeys0.QUESTION_PKEY;
    public static final UniqueKey<QuestionClosingRemarkRecord> QUESTION_CLOSING_REMARK_PKEY = UniqueKeys0.QUESTION_CLOSING_REMARK_PKEY;
    public static final UniqueKey<QuestionStatusRecord> QUESTION_STATUS_PKEY = UniqueKeys0.QUESTION_STATUS_PKEY;
    public static final UniqueKey<TagRecord> TAG_PKEY = UniqueKeys0.TAG_PKEY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AccountRecord, AccountStatusRecord> ACCOUNT__FK_ACCOUNT_STATUS = ForeignKeys0.ACCOUNT__FK_ACCOUNT_STATUS;
    public static final ForeignKey<AnswerRecord, MemberRecord> ANSWER__FK_ANSWER_AUTHOR_ID = ForeignKeys0.ANSWER__FK_ANSWER_AUTHOR_ID;
    public static final ForeignKey<AnswerRecord, QuestionRecord> ANSWER__FK_ANSWER_QUESTION_ID = ForeignKeys0.ANSWER__FK_ANSWER_QUESTION_ID;
    public static final ForeignKey<BountyRecord, MemberRecord> BOUNTY__FK_CREATOR_ID = ForeignKeys0.BOUNTY__FK_CREATOR_ID;
    public static final ForeignKey<CommentRecord, MemberRecord> COMMENT__FK_COMMENT_AUTHOR_ID = ForeignKeys0.COMMENT__FK_COMMENT_AUTHOR_ID;
    public static final ForeignKey<CommentRecord, AnswerRecord> COMMENT__FK_COMMENT_ANSWER_ID = ForeignKeys0.COMMENT__FK_COMMENT_ANSWER_ID;
    public static final ForeignKey<CommentRecord, QuestionRecord> COMMENT__FK_COMMENT_QUESTION_ID = ForeignKeys0.COMMENT__FK_COMMENT_QUESTION_ID;
    public static final ForeignKey<MemberRecord, AccountRecord> MEMBER__FK_ACCOUNT_ID = ForeignKeys0.MEMBER__FK_ACCOUNT_ID;
    public static final ForeignKey<PhotoRecord, QuestionRecord> PHOTO__FK_PHOTO_QUESTION_ID = ForeignKeys0.PHOTO__FK_PHOTO_QUESTION_ID;
    public static final ForeignKey<PhotoRecord, AnswerRecord> PHOTO__FK_PHOTO_ANSWER_ID = ForeignKeys0.PHOTO__FK_PHOTO_ANSWER_ID;
    public static final ForeignKey<PhotoRecord, CommentRecord> PHOTO__FK_PHOTO_COMMENT_ID = ForeignKeys0.PHOTO__FK_PHOTO_COMMENT_ID;
    public static final ForeignKey<QuestionRecord, QuestionStatusRecord> QUESTION__FK_STATUS_ID = ForeignKeys0.QUESTION__FK_STATUS_ID;
    public static final ForeignKey<QuestionRecord, QuestionClosingRemarkRecord> QUESTION__FK_CLOSING_REMARK_ID = ForeignKeys0.QUESTION__FK_CLOSING_REMARK_ID;
    public static final ForeignKey<QuestionRecord, MemberRecord> QUESTION__FK_AUTHOR_ID = ForeignKeys0.QUESTION__FK_AUTHOR_ID;
    public static final ForeignKey<QuestionRecord, BountyRecord> QUESTION__FK_BOUNTY_ID = ForeignKeys0.QUESTION__FK_BOUNTY_ID;
    public static final ForeignKey<TagQuestionRecord, TagRecord> TAG_QUESTION__FK_TAG_QUESTION_TAG_ID = ForeignKeys0.TAG_QUESTION__FK_TAG_QUESTION_TAG_ID;
    public static final ForeignKey<TagQuestionRecord, QuestionRecord> TAG_QUESTION__FK_TAG_QUESTION_QUESTION_ID = ForeignKeys0.TAG_QUESTION__FK_TAG_QUESTION_QUESTION_ID;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<AccountRecord, Long> IDENTITY_ACCOUNT = Internal.createIdentity(AccountTable.ACCOUNT_TABLE, AccountTable.ACCOUNT_TABLE.ID);
        public static Identity<AccountStatusRecord, Long> IDENTITY_ACCOUNT_STATUS = Internal.createIdentity(AccountStatusTable.ACCOUNT_STATUS_TABLE, AccountStatusTable.ACCOUNT_STATUS_TABLE.ID);
        public static Identity<AnswerRecord, Long> IDENTITY_ANSWER = Internal.createIdentity(AnswerTable.ANSWER_TABLE, AnswerTable.ANSWER_TABLE.ID);
        public static Identity<BountyRecord, Long> IDENTITY_BOUNTY = Internal.createIdentity(BountyTable.BOUNTY_TABLE, BountyTable.BOUNTY_TABLE.ID);
        public static Identity<CommentRecord, Long> IDENTITY_COMMENT = Internal.createIdentity(CommentTable.COMMENT_TABLE, CommentTable.COMMENT_TABLE.ID);
        public static Identity<MemberRecord, Long> IDENTITY_MEMBER = Internal.createIdentity(MemberTable.MEMBER_TABLE, MemberTable.MEMBER_TABLE.ID);
        public static Identity<PhotoRecord, Long> IDENTITY_PHOTO = Internal.createIdentity(PhotoTable.PHOTO_TABLE, PhotoTable.PHOTO_TABLE.ID);
        public static Identity<QuestionRecord, Long> IDENTITY_QUESTION = Internal.createIdentity(QuestionTable.QUESTION_TABLE, QuestionTable.QUESTION_TABLE.ID);
        public static Identity<QuestionClosingRemarkRecord, Long> IDENTITY_QUESTION_CLOSING_REMARK = Internal.createIdentity(QuestionClosingRemarkTable.QUESTION_CLOSING_REMARK_TABLE, QuestionClosingRemarkTable.QUESTION_CLOSING_REMARK_TABLE.ID);
        public static Identity<QuestionStatusRecord, Long> IDENTITY_QUESTION_STATUS = Internal.createIdentity(QuestionStatusTable.QUESTION_STATUS_TABLE, QuestionStatusTable.QUESTION_STATUS_TABLE.ID);
        public static Identity<TagRecord, Long> IDENTITY_TAG = Internal.createIdentity(TagTable.TAG_TABLE, TagTable.TAG_TABLE.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<AccountRecord> ACCOUNT_PKEY = Internal.createUniqueKey(AccountTable.ACCOUNT_TABLE, "account_pkey", new TableField[] { AccountTable.ACCOUNT_TABLE.ID }, true);
        public static final UniqueKey<AccountStatusRecord> ACCOUNT_STATUS_PKEY = Internal.createUniqueKey(AccountStatusTable.ACCOUNT_STATUS_TABLE, "account_status_pkey", new TableField[] { AccountStatusTable.ACCOUNT_STATUS_TABLE.ID }, true);
        public static final UniqueKey<AnswerRecord> ANSWER_PKEY = Internal.createUniqueKey(AnswerTable.ANSWER_TABLE, "answer_pkey", new TableField[] { AnswerTable.ANSWER_TABLE.ID }, true);
        public static final UniqueKey<BountyRecord> BOUNTY_PKEY = Internal.createUniqueKey(BountyTable.BOUNTY_TABLE, "bounty_pkey", new TableField[] { BountyTable.BOUNTY_TABLE.ID }, true);
        public static final UniqueKey<CommentRecord> COMMENT_PKEY = Internal.createUniqueKey(CommentTable.COMMENT_TABLE, "comment_pkey", new TableField[] { CommentTable.COMMENT_TABLE.ID }, true);
        public static final UniqueKey<MemberRecord> MEMBER_PKEY = Internal.createUniqueKey(MemberTable.MEMBER_TABLE, "member_pkey", new TableField[] { MemberTable.MEMBER_TABLE.ID }, true);
        public static final UniqueKey<PhotoRecord> PHOTO_PKEY = Internal.createUniqueKey(PhotoTable.PHOTO_TABLE, "photo_pkey", new TableField[] { PhotoTable.PHOTO_TABLE.ID }, true);
        public static final UniqueKey<QuestionRecord> QUESTION_PKEY = Internal.createUniqueKey(QuestionTable.QUESTION_TABLE, "question_pkey", new TableField[] { QuestionTable.QUESTION_TABLE.ID }, true);
        public static final UniqueKey<QuestionClosingRemarkRecord> QUESTION_CLOSING_REMARK_PKEY = Internal.createUniqueKey(QuestionClosingRemarkTable.QUESTION_CLOSING_REMARK_TABLE, "question_closing_remark_pkey", new TableField[] { QuestionClosingRemarkTable.QUESTION_CLOSING_REMARK_TABLE.ID }, true);
        public static final UniqueKey<QuestionStatusRecord> QUESTION_STATUS_PKEY = Internal.createUniqueKey(QuestionStatusTable.QUESTION_STATUS_TABLE, "question_status_pkey", new TableField[] { QuestionStatusTable.QUESTION_STATUS_TABLE.ID }, true);
        public static final UniqueKey<TagRecord> TAG_PKEY = Internal.createUniqueKey(TagTable.TAG_TABLE, "tag_pkey", new TableField[] { TagTable.TAG_TABLE.ID }, true);
    }

    private static class ForeignKeys0 {
        public static final ForeignKey<AccountRecord, AccountStatusRecord> ACCOUNT__FK_ACCOUNT_STATUS = Internal.createForeignKey(Keys.ACCOUNT_STATUS_PKEY, AccountTable.ACCOUNT_TABLE, "fk_account_status", new TableField[] { AccountTable.ACCOUNT_TABLE.ACCOUNT_STATUS_ID }, true);
        public static final ForeignKey<AnswerRecord, MemberRecord> ANSWER__FK_ANSWER_AUTHOR_ID = Internal.createForeignKey(Keys.MEMBER_PKEY, AnswerTable.ANSWER_TABLE, "fk_answer_author_id", new TableField[] { AnswerTable.ANSWER_TABLE.AUTHOR_ID }, true);
        public static final ForeignKey<AnswerRecord, QuestionRecord> ANSWER__FK_ANSWER_QUESTION_ID = Internal.createForeignKey(Keys.QUESTION_PKEY, AnswerTable.ANSWER_TABLE, "fk_answer_question_id", new TableField[] { AnswerTable.ANSWER_TABLE.QUESTION_ID }, true);
        public static final ForeignKey<BountyRecord, MemberRecord> BOUNTY__FK_CREATOR_ID = Internal.createForeignKey(Keys.MEMBER_PKEY, BountyTable.BOUNTY_TABLE, "fk_creator_id", new TableField[] { BountyTable.BOUNTY_TABLE.ID }, true);
        public static final ForeignKey<CommentRecord, MemberRecord> COMMENT__FK_COMMENT_AUTHOR_ID = Internal.createForeignKey(Keys.MEMBER_PKEY, CommentTable.COMMENT_TABLE, "fk_comment_author_id", new TableField[] { CommentTable.COMMENT_TABLE.AUTHOR_ID }, true);
        public static final ForeignKey<CommentRecord, AnswerRecord> COMMENT__FK_COMMENT_ANSWER_ID = Internal.createForeignKey(Keys.ANSWER_PKEY, CommentTable.COMMENT_TABLE, "fk_comment_answer_id", new TableField[] { CommentTable.COMMENT_TABLE.ANSWER_ID }, true);
        public static final ForeignKey<CommentRecord, QuestionRecord> COMMENT__FK_COMMENT_QUESTION_ID = Internal.createForeignKey(Keys.QUESTION_PKEY, CommentTable.COMMENT_TABLE, "fk_comment_question_id", new TableField[] { CommentTable.COMMENT_TABLE.QUESTION_ID }, true);
        public static final ForeignKey<MemberRecord, AccountRecord> MEMBER__FK_ACCOUNT_ID = Internal.createForeignKey(Keys.ACCOUNT_PKEY, MemberTable.MEMBER_TABLE, "fk_account_id", new TableField[] { MemberTable.MEMBER_TABLE.ID }, true);
        public static final ForeignKey<PhotoRecord, QuestionRecord> PHOTO__FK_PHOTO_QUESTION_ID = Internal.createForeignKey(Keys.QUESTION_PKEY, PhotoTable.PHOTO_TABLE, "fk_photo_question_id", new TableField[] { PhotoTable.PHOTO_TABLE.QUESTION_ID }, true);
        public static final ForeignKey<PhotoRecord, AnswerRecord> PHOTO__FK_PHOTO_ANSWER_ID = Internal.createForeignKey(Keys.ANSWER_PKEY, PhotoTable.PHOTO_TABLE, "fk_photo_answer_id", new TableField[] { PhotoTable.PHOTO_TABLE.ANSWER_ID }, true);
        public static final ForeignKey<PhotoRecord, CommentRecord> PHOTO__FK_PHOTO_COMMENT_ID = Internal.createForeignKey(Keys.COMMENT_PKEY, PhotoTable.PHOTO_TABLE, "fk_photo_comment_id", new TableField[] { PhotoTable.PHOTO_TABLE.COMMENT_ID }, true);
        public static final ForeignKey<QuestionRecord, QuestionStatusRecord> QUESTION__FK_STATUS_ID = Internal.createForeignKey(Keys.QUESTION_STATUS_PKEY, QuestionTable.QUESTION_TABLE, "fk_status_id", new TableField[] { QuestionTable.QUESTION_TABLE.STATUS_ID }, true);
        public static final ForeignKey<QuestionRecord, QuestionClosingRemarkRecord> QUESTION__FK_CLOSING_REMARK_ID = Internal.createForeignKey(Keys.QUESTION_CLOSING_REMARK_PKEY, QuestionTable.QUESTION_TABLE, "fk_closing_remark_id", new TableField[] { QuestionTable.QUESTION_TABLE.CLOSING_REMARK_ID }, true);
        public static final ForeignKey<QuestionRecord, MemberRecord> QUESTION__FK_AUTHOR_ID = Internal.createForeignKey(Keys.MEMBER_PKEY, QuestionTable.QUESTION_TABLE, "fk_author_id", new TableField[] { QuestionTable.QUESTION_TABLE.AUTHOR_ID }, true);
        public static final ForeignKey<QuestionRecord, BountyRecord> QUESTION__FK_BOUNTY_ID = Internal.createForeignKey(Keys.BOUNTY_PKEY, QuestionTable.QUESTION_TABLE, "fk_bounty_id", new TableField[] { QuestionTable.QUESTION_TABLE.BOUNTY_ID }, true);
        public static final ForeignKey<TagQuestionRecord, TagRecord> TAG_QUESTION__FK_TAG_QUESTION_TAG_ID = Internal.createForeignKey(Keys.TAG_PKEY, TagQuestionTable.TAG_QUESTION_TABLE, "fk_tag_question_tag_id", new TableField[] { TagQuestionTable.TAG_QUESTION_TABLE.TAG_ID }, true);
        public static final ForeignKey<TagQuestionRecord, QuestionRecord> TAG_QUESTION__FK_TAG_QUESTION_QUESTION_ID = Internal.createForeignKey(Keys.QUESTION_PKEY, TagQuestionTable.TAG_QUESTION_TABLE, "fk_tag_question_question_id", new TableField[] { TagQuestionTable.TAG_QUESTION_TABLE.QUESTION_ID }, true);
    }
}
