/*
 * This file is generated by jOOQ.
 */
package com.ra.course.com.stackoverflow.entity.jooq.tables;


import com.ra.course.com.stackoverflow.entity.jooq.Indexes;
import com.ra.course.com.stackoverflow.entity.jooq.Keys;
import com.ra.course.com.stackoverflow.entity.jooq.Public;
import com.ra.course.com.stackoverflow.entity.jooq.enums.AccountStatusType;
import com.ra.course.com.stackoverflow.entity.jooq.tables.records.AccountRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountTable extends TableImpl<AccountRecord> {

    private static final long serialVersionUID = 189946271;

    /**
     * The reference instance of <code>public.account</code>
     */
    public static final AccountTable ACCOUNT_TABLE = new AccountTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountRecord> getRecordType() {
        return AccountRecord.class;
    }

    /**
     * The column <code>public.account.id</code>.
     */
    public static final TableField<AccountRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('account_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), ACCOUNT_TABLE, "");

    /**
     * The column <code>public.account.password</code>.
     */
    public static final TableField<AccountRecord, String> PASSWORD = createField(DSL.name("password"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), ACCOUNT_TABLE, "");

    /**
     * The column <code>public.account.name</code>.
     */
    public static final TableField<AccountRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), ACCOUNT_TABLE, "");

    /**
     * The column <code>public.account.email</code>.
     */
    public static final TableField<AccountRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), ACCOUNT_TABLE, "");

    /**
     * The column <code>public.account.reputation</code>.
     */
    public static final TableField<AccountRecord, Integer> REPUTATION = createField(DSL.name("reputation"), org.jooq.impl.SQLDataType.INTEGER, ACCOUNT_TABLE, "");

    /**
     * The column <code>public.account.account_status</code>.
     */
    public static final TableField<AccountRecord, AccountStatusType> ACCOUNT_STATUS = createField(DSL.name("account_status"), org.jooq.impl.SQLDataType.VARCHAR.asEnumDataType(com.ra.course.com.stackoverflow.entity.jooq.enums.AccountStatusType.class), ACCOUNT_TABLE, "");

    /**
     * No further instances allowed
     */
    private AccountTable() {
        this(DSL.name("account"), null);
    }

    private AccountTable(Name alias, Table<AccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountTable(Name alias, Table<AccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AccountTable(Table<O> child, ForeignKey<O, AccountRecord> key) {
        super(child, key, ACCOUNT_TABLE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ACCOUNT_PKEY);
    }

    @Override
    public Identity<AccountRecord, Long> getIdentity() {
        return Keys.IDENTITY_ACCOUNT;
    }

    @Override
    public UniqueKey<AccountRecord> getPrimaryKey() {
        return Keys.ACCOUNT_PKEY;
    }

    @Override
    public List<UniqueKey<AccountRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountRecord>>asList(Keys.ACCOUNT_PKEY);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, String, Integer, AccountStatusType> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
