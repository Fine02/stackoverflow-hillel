/*
 * This file is generated by jOOQ.
 */
package com.ra.course.com.stackoverflow.entity.jooq.tables;


import com.ra.course.com.stackoverflow.entity.jooq.Keys;
import com.ra.course.com.stackoverflow.entity.jooq.Public;
import com.ra.course.com.stackoverflow.entity.jooq.tables.records.AccountRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountTable extends TableImpl<AccountRecord> {

    private static final long serialVersionUID = -1077163664;

    /**
     * The reference instance of <code>public.account</code>
     */
    public static final AccountTable ACCOUNT_TABLE = new AccountTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountRecord> getRecordType() {
        return AccountRecord.class;
    }

    /**
     * The column <code>public.account.id</code>.
     */
    public final TableField<AccountRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('account_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.account.password</code>.
     */
    public final TableField<AccountRecord, String> PASSWORD = createField(DSL.name("password"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>public.account.name</code>.
     */
    public final TableField<AccountRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>public.account.email</code>.
     */
    public final TableField<AccountRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>public.account.reputation</code>.
     */
    public final TableField<AccountRecord, Integer> REPUTATION = createField(DSL.name("reputation"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.account.account_status_id</code>.
     */
    public final TableField<AccountRecord, Long> ACCOUNT_STATUS_ID = createField(DSL.name("account_status_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.account</code> table reference
     */
    public AccountTable() {
        this(DSL.name("account"), null);
    }

    /**
     * Create an aliased <code>public.account</code> table reference
     */
    public AccountTable(String alias) {
        this(DSL.name(alias), ACCOUNT_TABLE);
    }

    /**
     * Create an aliased <code>public.account</code> table reference
     */
    public AccountTable(Name alias) {
        this(alias, ACCOUNT_TABLE);
    }

    private AccountTable(Name alias, Table<AccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountTable(Name alias, Table<AccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> AccountTable(Table<O> child, ForeignKey<O, AccountRecord> key) {
        super(child, key, ACCOUNT_TABLE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<AccountRecord, Long> getIdentity() {
        return Keys.IDENTITY_ACCOUNT;
    }

    @Override
    public UniqueKey<AccountRecord> getPrimaryKey() {
        return Keys.ACCOUNT_PKEY;
    }

    @Override
    public List<UniqueKey<AccountRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountRecord>>asList(Keys.ACCOUNT_PKEY);
    }

    @Override
    public List<ForeignKey<AccountRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AccountRecord, ?>>asList(Keys.ACCOUNT__FK_ACCOUNT_STATUS);
    }

    public AccountStatusTable accountStatus() {
        return new AccountStatusTable(this, Keys.ACCOUNT__FK_ACCOUNT_STATUS);
    }

    @Override
    public AccountTable as(String alias) {
        return new AccountTable(DSL.name(alias), this);
    }

    @Override
    public AccountTable as(Name alias) {
        return new AccountTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountTable rename(String name) {
        return new AccountTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountTable rename(Name name) {
        return new AccountTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, String, Integer, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
