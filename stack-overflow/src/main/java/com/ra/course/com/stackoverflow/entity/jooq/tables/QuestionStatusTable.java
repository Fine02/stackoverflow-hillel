/*
 * This file is generated by jOOQ.
 */
package com.ra.course.com.stackoverflow.entity.jooq.tables;


import com.ra.course.com.stackoverflow.entity.jooq.Keys;
import com.ra.course.com.stackoverflow.entity.jooq.Public;
import com.ra.course.com.stackoverflow.entity.jooq.tables.records.QuestionStatusRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QuestionStatusTable extends TableImpl<QuestionStatusRecord> {

    private static final long serialVersionUID = 2017063966;

    /**
     * The reference instance of <code>public.question_status</code>
     */
    public static final QuestionStatusTable QUESTION_STATUS_TABLE = new QuestionStatusTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuestionStatusRecord> getRecordType() {
        return QuestionStatusRecord.class;
    }

    /**
     * The column <code>public.question_status.id</code>.
     */
    public final TableField<QuestionStatusRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('question_status_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.question_status.status</code>.
     */
    public final TableField<QuestionStatusRecord, String> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * Create a <code>public.question_status</code> table reference
     */
    public QuestionStatusTable() {
        this(DSL.name("question_status"), null);
    }

    /**
     * Create an aliased <code>public.question_status</code> table reference
     */
    public QuestionStatusTable(String alias) {
        this(DSL.name(alias), QUESTION_STATUS_TABLE);
    }

    /**
     * Create an aliased <code>public.question_status</code> table reference
     */
    public QuestionStatusTable(Name alias) {
        this(alias, QUESTION_STATUS_TABLE);
    }

    private QuestionStatusTable(Name alias, Table<QuestionStatusRecord> aliased) {
        this(alias, aliased, null);
    }

    private QuestionStatusTable(Name alias, Table<QuestionStatusRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> QuestionStatusTable(Table<O> child, ForeignKey<O, QuestionStatusRecord> key) {
        super(child, key, QUESTION_STATUS_TABLE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<QuestionStatusRecord, Long> getIdentity() {
        return Keys.IDENTITY_QUESTION_STATUS;
    }

    @Override
    public UniqueKey<QuestionStatusRecord> getPrimaryKey() {
        return Keys.QUESTION_STATUS_PKEY;
    }

    @Override
    public List<UniqueKey<QuestionStatusRecord>> getKeys() {
        return Arrays.<UniqueKey<QuestionStatusRecord>>asList(Keys.QUESTION_STATUS_PKEY);
    }

    @Override
    public QuestionStatusTable as(String alias) {
        return new QuestionStatusTable(DSL.name(alias), this);
    }

    @Override
    public QuestionStatusTable as(Name alias) {
        return new QuestionStatusTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionStatusTable rename(String name) {
        return new QuestionStatusTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionStatusTable rename(Name name) {
        return new QuestionStatusTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
