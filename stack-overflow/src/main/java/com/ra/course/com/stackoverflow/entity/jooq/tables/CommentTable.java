/*
 * This file is generated by jOOQ.
 */
package com.ra.course.com.stackoverflow.entity.jooq.tables;


import com.ra.course.com.stackoverflow.entity.jooq.Keys;
import com.ra.course.com.stackoverflow.entity.jooq.Public;
import com.ra.course.com.stackoverflow.entity.jooq.tables.records.CommentRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import static org.jooq.impl.SQLDataType.BIGINT;
import static org.jooq.impl.SQLDataType.INTEGER;
import static org.jooq.impl.SQLDataType.LOCALDATETIME;
import static org.jooq.impl.SQLDataType.VARCHAR;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class CommentTable extends TableImpl<CommentRecord> {

    private static final long serialVersionUID = -266427025;

    /**
     * The reference instance of <code>public.comment</code>
     */
    public static final CommentTable COMMENT_TABLE = new CommentTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommentRecord> getRecordType() {
        return CommentRecord.class;
    }

    /**
     * The column <code>public.comment.id</code>.
     */
    public final TableField<CommentRecord, Long> ID = createField(DSL.name("id"), BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('comment_id_seq'::regclass)", BIGINT)), this, "");

    /**
     * The column <code>public.comment.comment_text</code>.
     */
    public final TableField<CommentRecord, String> COMMENT_TEXT = createField(DSL.name("comment_text"), VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.comment.creation_date</code>.
     */
    public final TableField<CommentRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.comment.vote_count</code>.
     */
    public final TableField<CommentRecord, Integer> VOTE_COUNT = createField(DSL.name("vote_count"), INTEGER, this, "");

    /**
     * The column <code>public.comment.author_id</code>.
     */
    public final TableField<CommentRecord, Long> AUTHOR_ID = createField(DSL.name("author_id"), BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.comment.answer_id</code>.
     */
    public final TableField<CommentRecord, Long> ANSWER_ID = createField(DSL.name("answer_id"), BIGINT, this, "");

    /**
     * The column <code>public.comment.question_id</code>.
     */
    public final TableField<CommentRecord, Long> QUESTION_ID = createField(DSL.name("question_id"), BIGINT, this, "");

    /**
     * Create a <code>public.comment</code> table reference
     */
    public CommentTable() {
        this(DSL.name("comment"), null);
    }

    /**
     * Create an aliased <code>public.comment</code> table reference
     */
    public CommentTable(String alias) {
        this(DSL.name(alias), COMMENT_TABLE);
    }

    /**
     * Create an aliased <code>public.comment</code> table reference
     */
    public CommentTable(Name alias) {
        this(alias, COMMENT_TABLE);
    }

    private CommentTable(Name alias, Table<CommentRecord> aliased) {
        this(alias, aliased, null);
    }

    private CommentTable(Name alias, Table<CommentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> CommentTable(Table<O> child, ForeignKey<O, CommentRecord> key) {
        super(child, key, COMMENT_TABLE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<CommentRecord, Long> getIdentity() {
        return Keys.IDENTITY_COMMENT;
    }

    @Override
    public UniqueKey<CommentRecord> getPrimaryKey() {
        return Keys.COMMENT_PKEY;
    }

    @Override
    public List<UniqueKey<CommentRecord>> getKeys() {
        return Arrays.<UniqueKey<CommentRecord>>asList(Keys.COMMENT_PKEY);
    }

    @Override
    public List<ForeignKey<CommentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CommentRecord, ?>>asList(Keys.COMMENT__FK_COMMENT_AUTHOR_ID, Keys.COMMENT__FK_COMMENT_ANSWER_ID, Keys.COMMENT__FK_COMMENT_QUESTION_ID);
    }

    public MemberTable member() {
        return new MemberTable(this, Keys.COMMENT__FK_COMMENT_AUTHOR_ID);
    }

    public AnswerTable answer() {
        return new AnswerTable(this, Keys.COMMENT__FK_COMMENT_ANSWER_ID);
    }

    public QuestionTable question() {
        return new QuestionTable(this, Keys.COMMENT__FK_COMMENT_QUESTION_ID);
    }

    @Override
    public CommentTable as(String alias) {
        return new CommentTable(DSL.name(alias), this);
    }

    @Override
    public CommentTable as(Name alias) {
        return new CommentTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CommentTable rename(String name) {
        return new CommentTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CommentTable rename(Name name) {
        return new CommentTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, LocalDateTime, Integer, Long, Long, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
